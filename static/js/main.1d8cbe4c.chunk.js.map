{"version":3,"sources":["logo.svg","Timer/index.js","Input/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Timer","props","state","fromTime","dateTime","countdown","stringTime","console","log","deadline","Date","getTime","x","setInterval","now","t","days","Math","floor","hours","minutes","seconds","clearInterval","removeElementFromList","alert","toLocaleTimeString","setState","this","startTimer","e","onChange","target","value","React","Component","GetInput","datetime","divList","divListCopy","concat","push","copyList","filter","endTime","className","type","newDateEvent","onClick","onBtnPress","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,8KC0D3BC,G,8DAtDZ,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAU,EAAKF,MAAMG,SACrBC,UAAW,kBAJA,E,uDASPC,GAAc,IAAD,OAErBC,QAAQC,IAAI,cAAgBF,GAC5B,IAAIG,EAAW,IAAIC,KAAKJ,GAAYK,UAEhCC,EAAIC,aAAY,WAChB,IAAIC,GAAM,IAAIJ,MAAOC,UACjBI,EAAIN,EAAWK,EACfE,EAAOC,KAAKC,MAAMH,EAAC,OACnBI,EAAQF,KAAKC,MAAOH,EAAC,MAAF,MACnBK,EAAUH,KAAKC,MAAOH,EAAC,KAAF,KACrBM,EAAUJ,KAAKC,MAAOH,EAAC,IAAkB,KAC7C,GAAIC,EAAO,GAAKG,EAAQ,GAAKC,EAAU,GAAKC,EAAU,EAIlD,OAHAd,QAAQC,IAAI,eACZc,cAAcV,GACd,EAAKX,MAAMsB,wBACJC,MAAM,wBAA0B,IAAId,KAAKA,KAAKI,OAAOW,qBAAuB,QAEvF,EAAKC,SAAS,CACVrB,UAAWW,EAAO,KACZG,EAAQ,KAAOC,EAAU,KAAOC,EAAU,SAGrD,O,0CAIHM,KAAKC,WAAWD,KAAKzB,MAAMC,Y,yCAGZ0B,GACoB,oBAAxBF,KAAK1B,MAAM6B,UAClBH,KAAK1B,MAAM6B,SAASD,EAAEE,OAAOC,S,+BAKjC,OACI,6BACKL,KAAKzB,MAAMG,e,GAjDR4B,IAAMC,YCoEXC,E,kDAlEX,WAAYlC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTkC,SAAU,aAEVC,QAAS,IALE,E,yDAcf,IAAIC,EAAc,GAAGC,OAAOZ,KAAKzB,MAAMmC,SAEvC,OADAC,EAAYE,KAAKb,KAAKzB,MAAMkC,UAExBT,KAAKD,SAAS,CACVW,QAASC,M,8CAUjB/B,QAAQC,IAAI,kBACZ,IAAIiC,EAAW,GAAGF,OAAOZ,KAAKzB,MAAMmC,SACpCI,EAAWA,EAASC,QAAO,SAACC,GAAD,OAAc,IAAIjC,KAAKiC,GAAShC,UAAYD,KAAKI,MAAS,KACrFa,KAAKD,SAAS,CACVW,QAASI,M,+BAMP,IAAD,OACL,OACI,6BACI,yBAAKG,UAAW,UACZ,2BAAOA,UAAU,iBAAiBC,KAAK,iBAAiBf,SAAU,SAACgB,GAC/D,EAAKpB,SAAS,CAACU,SAAUU,EAAaf,OAAOC,WAGjD,4BAAQY,UAAW,cACXG,QAAS,kBAAM,EAAKC,eAD5B,iBAMHrB,KAAKzB,MAAMmC,QAAQY,KAAI,SAACN,GAAD,OAChB,yBAAKC,UAAW,OACZ,6BACI,kBAAC,EAAD,CAAOM,IAAKP,EAASvC,SAAUuC,EACxBpB,sBAAuB,kBAAM,EAAKA,qC,GAzDlDU,IAAMC,WCSdiB,MARf,WACE,OACE,yBAAKP,UAAU,OACf,kBAAC,EAAD,QCIgBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.1d8cbe4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport './styles.css'\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fromTime: this.props.dateTime,\n            countdown: 'Starting Timer',\n\n        }\n    }\n\n    startTimer (stringTime)  {\n\n        console.log('string is :' + stringTime);\n        let deadline = new Date(stringTime).getTime();\n\n        let x = setInterval(() => {\n            let now = new Date().getTime();\n            let t = deadline - now;\n            let days = Math.floor(t / (1000 * 60 * 60 * 24));\n            let hours = Math.floor((t % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            let minutes = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60));\n            let seconds = Math.floor((t % (1000 * 60)) / 1000);\n            if (days < 0 && hours < 0 && minutes < 0 && seconds < 0) {\n                console.log(\"timer ended\")\n                clearInterval(x);\n                this.props.removeElementFromList();\n                return alert('Timer Completed, Its ' + new Date(Date.now()).toLocaleTimeString() + \" now\");\n            }\n            this.setState({\n                countdown: days + \"d \"\n                    + hours + \"h \" + minutes + \"m \" + seconds + \"s \",\n            });\n\n        }, 1000);\n    }\n\n    componentDidMount() {\n        this.startTimer(this.state.fromTime);\n    }\n\n    callParentFunction(e) {\n        if (typeof this.props.onChange === 'function') {\n            this.props.onChange(e.target.value);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.countdown}\n            </div>\n        );\n    }\n}\n\nexport default (Timer);\n","import React from \"react\";\nimport './styles.css'\nimport Timer from \"../Timer\";\n\nclass GetInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            datetime: \"12/12/1212\",\n\n            divList: [],\n\n        }\n    }\n\n    onBtnPress() {\n        // console.log(this.state.datetime)\n        // console.log(\"above this is the time from input field, end time of timer\")\n        // console.log(new Date(this.state.datetime).getTime())\n        let divListCopy = [].concat(this.state.divList);\n        divListCopy.push(this.state.datetime);\n        return (\n            this.setState({\n                divList: divListCopy,\n            })\n        );\n\n\n    }\n\n    // endTimeFromInput\n\n    removeElementFromList() {\n        console.log(\"filtering list\")\n        let copyList = [].concat(this.state.divList);\n        copyList = copyList.filter((endTime) => (new Date(endTime).getTime() - Date.now()) > 0);\n        this.setState({\n            divList: copyList,\n        })\n\n    }\n\n\n    render() {\n        return (\n            <div>\n                <div className={\"all-el\"}>\n                    <input className=\"datetimepicker\" type=\"datetime-local\" onChange={(newDateEvent) => {\n                        this.setState({datetime: newDateEvent.target.value});\n                    }}/>\n\n                    <button className={\"add-rem-btn\"}\n                            onClick={() => this.onBtnPress()}\n                    >\n                        Add Reminder\n                    </button>\n                </div>\n                {this.state.divList.map((endTime) => (\n                        <div className={\"rem\"}>\n                            <div>\n                                <Timer key={endTime} dateTime={endTime}\n                                       removeElementFromList={() => this.removeElementFromList()}/>\n                            </div>\n                        </div>\n                    )\n                )}\n            </div>\n        );\n    }\n}\n\nexport default GetInput;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GetInput from './Input'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <GetInput></GetInput>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}