{"version":3,"sources":["logo.svg","Timer/index.js","Input/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Timer","props","intervalId","useState","Date","endTimeInMili","getTime","endTimeInMilliseconds","countdown","setCountDown","startTimer","setInterval","endTime","seconds","Math","floor","minutes","hours","days","clearInterval","console","log","onTimerEnd","getCountDownFromMilliseconds","useEffect","className","GetInput","filterEndTimesList","endTimeToRemove","state","endTimesList","length","endTimesListCopy","concat","filter","et","setState","alert","type","onChange","dateTimeEntered","target","value","onClick","tempEndTimeList","push","toString","this","map","t","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,kC,mMCG5B,SAASC,EAAMC,GAAQ,IAG9BC,EAH6B,EACyBC,mBAAS,IAAIC,KAAKH,EAAMI,eAAeC,WADhE,mBAC1BC,EAD0B,aAECJ,mBAAS,KAFV,mBAE1BK,EAF0B,KAEfC,EAFe,KAuBjC,SAASC,IACLR,EAAaS,aAAY,YAnB7B,SAAsCC,GAClCA,IAAoB,IAAIR,MAAOE,UAE/B,IAAIO,EAAUC,KAAKC,MAAOH,EAAU,IAAQ,IACxCI,EAAUF,KAAKC,MAAOH,EAAO,IAAkB,IAC/CK,EAAQH,KAAKC,MAAOH,EAAO,KAAuB,IAClDM,EAAOJ,KAAKC,MAAOH,EAAO,MAA4B,IAE1D,GAAIM,GAAQ,GAAKD,GAAS,GAAKD,GAAW,GAAKH,GAAW,EAKtD,OAJAM,cAAcjB,GACdO,EAAaS,EAAO,KAAOD,EAAQ,KAAOD,EAAU,KAAOH,EAAU,KACrEO,QAAQC,IAAI,eAAenB,QAC3BD,EAAMqB,WAAWrB,EAAMI,eAG3BI,EAAaS,EAAO,KAAOD,EAAQ,KAAOD,EAAU,KAAOH,EAAU,KAKjEU,CAA6BhB,KAC9B,KAMP,OAJAiB,qBAAU,WACNd,MAED,CAAC,IAEA,yBAAKe,UAAU,SACVjB,G,ICjCQkB,E,kDACjB,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IAUV0B,mBAAmB,SAACC,GAChBR,QAAQC,IAAI,8CAA+CO,GAC3DR,QAAQC,IAAI,4BAA4B,EAAKQ,MAAMC,aAAaC,QAChEX,QAAQC,IAAI,EAAKQ,MAAMC,cACvB,IAAIE,EAAiB,GAAGC,OAAO,EAAKJ,MAAMC,cAC1CE,EAAiB,GAAGC,OAAOD,EAAiBE,QAAO,SAACC,GAAD,OAAMA,IAAKP,MAC9DR,QAAQC,IAAI,sBAAsBW,EAAiBD,QACnD,EAAKK,SAAS,CACVN,aAAaE,IAEjBK,MAAM,yBAAyBT,IAnB/B,EAAKC,MAAQ,CACTjB,QAAS,GACTkB,aAAc,IAJH,E,qDAwBT,IAAD,OACL,OACI,yBAAKL,UAAU,qBACX,6BACI,2BAAOa,KAAK,iBAAiBC,SAAU,SAACC,GACpC,EAAKJ,SAAS,CACVxB,QAAQ4B,EAAgBC,OAAOC,YAI3C,6BACI,4BAAQC,QAAS,WACb,IAAIC,EAAkB,GAAGX,OAAO,EAAKJ,MAAMC,cAC3Cc,EAAgBC,KAAK,EAAKhB,MAAMjB,QAAQkC,YACxC,EAAKV,SAAS,CACVN,aAAac,MAJrB,iBAUJ,yBAAKnB,UAAU,iBACVsB,KAAKlB,MAAMC,aAAakB,KAAI,SAACC,GAAD,OACzB,kBAACjD,EAAD,CAAOkD,IAAKD,EAAG5C,cAAe4C,EAAG3B,WAAY,SAAC2B,GAAD,OACzC,EAAKtB,mBAAmBsB,KAExB,6BACKA,a,GApDKE,IAAMC,WCS7BC,MARf,WACE,OACE,yBAAK5B,UAAU,OACf,kBAAC,EAAD,QCIgB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.c9ac71cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from \"react\";\nimport './styles.css'\n\nexport default function Timer(props) {\n    const [endTimeInMilliseconds, setEndTimeInMilliseconds] = useState(new Date(props.endTimeInMili).getTime());\n    const [countdown, setCountDown] = useState(\"\");\n    let intervalId;\n\n    function getCountDownFromMilliseconds(endTime) {\n        endTime = endTime - new Date().getTime();\n\n        let seconds = Math.floor((endTime / 1000) % 60)\n        let minutes = Math.floor((endTime / (1000 * 60)) % 60)\n        let hours = Math.floor((endTime / (1000 * 60 * 60)) % 24)\n        let days = Math.floor((endTime / (1000 * 60 * 60 * 24)) % 24)\n\n        if (days <= 0 && hours <= 0 && minutes <= 0 && seconds <= 0) {\n            clearInterval(intervalId);\n            setCountDown(days + \"d:\" + hours + \"h:\" + minutes + \"m:\" + seconds + \"s\");\n            console.log(\"intervalId: \"+intervalId)\n            props.onTimerEnd(props.endTimeInMili);\n            return;\n        }// console.log(\n        setCountDown(days + \"d:\" + hours + \"h:\" + minutes + \"m:\" + seconds + \"s\");\n// days + \"d:\" + hours + \"h:\" + minutes + \"m:\" + seconds+\"s\")\n    }\n    function startTimer(){\n        intervalId = setInterval(() => {\n            getCountDownFromMilliseconds(endTimeInMilliseconds);\n        }, 1000)\n    }\n    useEffect(() => {\n        startTimer();\n        // getCountDownFromMilliseconds(endTimeInMilliseconds)\n    }, [1])\n    return (\n        <div className=\"timer\">\n            {countdown}\n        </div>\n    )\n}\n\n\n","import React from \"react\";\nimport './styles.css'\nimport Timer from \"../Timer\";\n\nexport default class GetInput extends React.Component  {\n    constructor(props) {\n        super(props);\n        this.state = {\n            endTime: \"\",\n            endTimesList: [],\n        }\n    }\n    // const [endTime, setEndTime] = useState(\"\");\n    // const [endTimesList, setEndTimesList] = useState([]);\n\n\n    filterEndTimesList=(endTimeToRemove)=>{\n        console.log(\"called parent function from child ofr key: \" +endTimeToRemove);\n        console.log(\"endtimes list length is: \"+this.state.endTimesList.length);\n        console.log(this.state.endTimesList)\n        let endTimesListCopy=[].concat(this.state.endTimesList);\n        endTimesListCopy=[].concat(endTimesListCopy.filter((et)=>et!==endTimeToRemove));\n        console.log(\"len of endList now:\"+endTimesListCopy.length)\n        this.setState({\n            endTimesList:endTimesListCopy\n        })\n        alert(\"Timer Ended. Its now: \"+endTimeToRemove)\n    }\n    // useEffect(()=>{},[endTimesList])\n    render() {\n        return (\n            <div className=\"add-reminder-cont\">\n                <div>\n                    <input type=\"datetime-local\" onChange={(dateTimeEntered) => {\n                        this.setState({\n                            endTime:dateTimeEntered.target.value\n                        })\n                    }}/>\n                </div>\n                <div>\n                    <button onClick={() => {\n                        let tempEndTimeList = [].concat(this.state.endTimesList)\n                        tempEndTimeList.push(this.state.endTime.toString())\n                        this.setState({\n                            endTimesList:tempEndTimeList\n                        })\n                    }}>\n                        Set Reminder\n                    </button>\n                </div>\n                <div className=\"timersListCol\">\n                    {this.state.endTimesList.map((t) => (\n                        <Timer key={t} endTimeInMili={t} onTimerEnd={(t) =>\n                            this.filterEndTimesList(t)\n                        }>\n                            <div>\n                                {t}</div>\n                        </Timer>\n                    ))\n                    }\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GetInput from './Input'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <GetInput></GetInput>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}